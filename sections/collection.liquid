{% paginate collection.products by 4 %}
    <section class="collection-sec">
        <div>
            <select id="sort-by">
                {% assign sort_by = collection.sort_by | default: collection.default_sort_by %}

                {% for option in collection.sort_options %}
                    <option
                            value="{{ option.value }}"
                            {% if option.value == sort_by %}
                                selected="selected"
                            {% endif %}
                    >
                        {{ option.name }}
                    </option>
                {% endfor %}
            </select>
        </div>
        <div>
            <h1>collections</h1>
            <p>{{ collection.title }}</p>
            <div class="products-grid">
                {% for product in collection.products %}
                    <div class="product-card">
                        <img
                                width="300"
                                height="300"
                                loading="lazy"
                                src="{{ product.featured_image | image_url }}"
                        >
                        <h3>{{- product.title | link_to: product.url }}</h3>
                    </div>
                {% endfor %}
            </div>
        </div>
    </section>
<div class="pagination">
    {{ paginate | default_pagination }}
    {% endpaginate %}
</div>

<style>
    .collection-sec {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        text-decoration: none;
        color: #333333;
    }

    .collection-sec h1 {
        font-size: 2rem;
        margin: 0;
        text-transform: uppercase;

    }

    .collection-sec p {
        margin: 0;
        font-size: 1.2rem;
        text-transform: uppercase;

    }

    .products-grid {
        display: grid;
        grid-template-columns: repeat(4, 1fr); /* Four columns */
        gap: 20px; /* Adjust the gap between grid items */
    }

    .product-card {
        border: 1px solid #DDDDDD; /* Add a border for each product card */
        padding: 20px;
        text-align: center;
        transition: border-color 0.3s ease; /* Add transition for hover effect */
    }

    .collection-sec a {
        text-decoration: none;
        color: inherit;
    }

    span {
        display: inline-block;
        padding: 5px 10px;
        margin: 5px;
        border-radius: 5px;
        background-color: #F0F0F0;
        color: #333333;
        text-align: center;
        text-decoration: none;
        cursor: pointer;
    }

    span a {
        text-decoration: none;
        color: inherit;
    }

    span:hover {
        background-color: #DDDDDD;
    }

    .product-card:hover {
        border-color: #AAAAAA; /* Change border color on hover */
    }

    select, button {
        padding: 10px;
        border-radius: 5px;
        border: 1px solid #DDDDDD;
        background: #F0F0F0;
        color: #333333;
    }

    select:hover, button:hover {
        border-color: #AAAAAA;
    }

    .product-card img {
        max-width: 100%;
        height: auto;
    }

    .pagination {
        display: flex;
        justify-content: center;
        margin-top: 20px;
    }
</style>

<script>
    Shopify.queryParams = {};

    // Preserve existing query parameters
    if (location.search.length) {
        var params = location.search.substr(1).split('&');

        for (var i = 0; i < params.length; i++) {
            var keyValue = params[i].split('=');

            if (keyValue.length) {
                Shopify.queryParams[decodeURIComponent(keyValue[0])] = decodeURIComponent(keyValue[1]);
            }
        }
    }

    // Update sort_by query parameter on select change
    document.querySelector('#sort-by').addEventListener('change', function (e) {
        var value = e.target.value;

        Shopify.queryParams.sort_by = value;
        location.search = new URLSearchParams(Shopify.queryParams).toString();
    });
</script>

{% schema %}
{
  "name": "collection",
  "settings": [
    {
      "type": "color",
      "id": "background",
      "label": "Background",
      "default": "#F4F4F4"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text",
      "default": "#000000"
    }
  ],
  "presets": [
    {
      "name": "collection"
    }
  ]
}
{% endschema %}